@using GDCIC.Core.CodeServer
@using GDCIC.Core.CodeServer.Model
@using GDCIC.Core.CodeServer.Config
@using System.Linq
@using GDCIC.Core.CodeServer.RazorPaser
@inherits  RazorCustomizedTemplate<GDCIC.Core.CodeServer.Model.Table> 
 
@{
    OutputContext CurrentOutputContext = Model.CurrentOutputContext;
    string RepoName = CurrentOutputContext.Owner == "" ? "RogenDB" : CurrentOutputContext.Owner;
    string ConnectionStringName = CurrentOutputContext.Owner == "" ? "RogenDB" : CurrentOutputContext.Owner;
    bool GenerateOperations = true;
    bool TrackModifiedColumns = true;
    bool GeneratePocos = true;
	Table tbl = Model;
	string TableName = tbl.Name;
	string ClassName = tbl.ClassName+"Entity";
	string MapperName = tbl.ClassName+"Mapper";
	string ServiceName = tbl.ClassName+"Service";
    string ContextName = CurrentOutputContext.ProjectConfig.Name + "DbContext";
    string NameSpace = CurrentOutputContext.GeneraterConfig.NameSpace + ".Domain";
}
using System;
using System.Collections.Generic;
using System.Linq;
using GDCIC.Core.Data;
using GDCIC.Core.Domain;
using Pure.Data;
namespace @NameSpace
{
    /// <summary>
    /// @tbl.Comment 应用服务
    ///</summary>
	public class @(ServiceName) : PDRepositoryBase<@(ContextName), @(ClassName)>, IApplicationService
    {
        public @(ServiceName)(@(ContextName) ctx)
            : base(ctx)
        {

        }

        public List<@(ClassName)> GetPageData(int pageIndex, int pageSize, string sort, bool asc, string keywords, out int total)
        {
            var pgp = Predicates.Group(GroupOperator.And);

            if (keywords.IsNotNullOrEmpty())
            {
                pgp.Add(Predicates.Field<@(ClassName)>(p => p.NAME, Operator.Like, "%" + keywords + "%"));
            }

            //排序
            var sortGroup = Predicates.SortGroup();
            sortGroup.Add(Predicates.Sort(sort, asc));

            var data = QueryPage(pageIndex, pageSize, pgp, sortGroup , out total).ToList();
            return data;
        }

    }
	
}