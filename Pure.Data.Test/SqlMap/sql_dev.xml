<?xml version="1.0" encoding="utf-8" ?>
<SqlMap Scope="Pure.Data.Test.TB_USER"  xmlns="http://PureData.net/schemas/SqlMap.xsd">
  <!--以下是缓存配置-->
  <Caches>
    <!--<Cache Id="T_Test.RedisCache" Type="Pure.Data.Cache.Redis.RedisCacheProvider,Pure.Data.Cache.Redis">
      <Parameter Key="CacheSize" Value="1000"/>
      <Parameter Key="ConnectionString" Value="192.168.31.103"/>
      <Parameter Key="DatabaseId" Value="0"/>
      <FlushInterval Hours="24" Minutes="0" Seconds="0"/>
      <FlushOnExecute Statement="T_Test.Insert"/>
      <FlushOnExecute Statement="T_Test.Update"/>
    </Cache>-->

    <Cache Id="TB_USER.LruCache" Type="Lru">
      <Parameter Key="CacheSize" Value="120"/>
      <FlushInterval Hours="0" Minutes="10" Seconds="0"/>
      <FlushOnExecute Statement="TB_USER.Insert"/>
      <FlushOnExecute Statement="TB_USER.Update"/>
    </Cache>

  </Caches>
  <!--以下是SQL片段-->
  <Statements>

    <Statement Id="GetListTest"  >
      Select * From TB_USER T Where 1=1
      <IsGreaterThan Prepend="and" Property="ID" CompareValue="0">
        ID &lt;= 99999999999999
      </IsGreaterThan>
      <IsNotEmpty Prepend="AND" Property="Name">
        Name like '%${Name}%'
      </IsNotEmpty>

      <IsNotEmpty Prepend="AND" Property="Name">
        Name = #{Name}
      </IsNotEmpty>
      <!--<IsNotEmpty Prepend="AND" Property="Name">
          Name = #{Name} 
      </IsNotEmpty>
      <IsNotEmpty Prepend="AND" Property="Name">
        Name like '%#{Name}%'
      </IsNotEmpty>
      <IsGreaterThan Prepend="and" Property="ID" CompareValue="0">
        ID = #{ID} 
      </IsGreaterThan>
      <IsNotEmpty Prepend="and Id" Property="Ids" In="true" />-->


    </Statement>



    <!--获取数据列-->
    <Statement Id="GetListByFor"  >
      Select * From TB_USER T Where 1=1
      <Foreach Prepend="And" Property="LikeNames" Index="index" Item="item" Open="(" Separator="Or" Close=")">
        Name Like  '%#{item.Name}%' and Id > #{index}  and Id > #{item.Id}
      </Foreach>
      <IsNotEmpty Prepend="AND" Property="Name">
        Name = #{Name}
      </IsNotEmpty>



      <!--Select * From TB_USER T Where 1=1 and id in
      <Foreach Prepend="" Property="LikeNames"  Index="index" Item="item" Open="(" Separator="Or" Close=")">
        #{item.Id
      </Foreach>-->
    </Statement>

    <!--if test-->
    <!--特殊字符比较
    ""标识字符串 
''标识字符

字符标识
<if test="chr=='1'"></if>

字符串标识
<if test='str=="1"'></if>

例如：<if test='id != null and id > 28'></if>

 mybatis对于这种大于小于等等还有另一种形式。

例如：<if test='id != null and id gt 28'></if>

对应关系：

    and            对应             &&
 
    or            对应             ||
    
    gt            对应             >

    gte         对应              >=

    lt             对应              <(会报错  相关联的 "test" 属性值不能包含 '<' 字符)

    lte          对应               <=(会报错  相关联的 "test" 属性值不能包含 '<' 字符)
    
    eq                  对应                ==

   neq               对应                 !=
 
    
    -->
    <Statement Id="GetListIfTest">
      Select * From TB_USER T Where 1=1
      <If Test='Ids!=null and Ids.Length > 0  '>
        and T.Id in #{Ids}
      </If> 
      <If Test='Name != "6662" '>
        and T.Name != '6662'
      </If>
 
    </Statement>

    <Statement Id="GetListBindTest">
      Select * From TB_USER T Where 1=1
      <Bind Name="bindName1" Value="22"></Bind>
      <Bind Name="bindName2" Value='"hello"'></Bind>

      <If Test='bindName1 lte 1000 and bindName2 != null   and  bindName2.Length > 0  '>
        and T.Id = #{bindName1}
      </If> 

    </Statement>

    <Statement Id="GetListChooseTest">
      Select * From TB_USER T Where 1=1

      <Choose>
      <When Test='Name != null and Name == "liweisi"'>
        and Name=#{Name}
      </When>
        <When Test='ID > 0'>
          and ID=#{ID}
        </When>
      <Otherwise>
        and Name='otherwise'
      </Otherwise>
    </Choose>
      
    </Statement>

    <Statement Id="GetListTrimTest">
      Select * From TB_USER T

      <Trim Prefix="WHERE " PrefixOverrides="AND |OR ">
        <If Test="Name!=null  ">
          and Name=#{Name}
        </If>
        <If Test=" Nam!=null">
          and Name=#{Nam}
        </If>
      </Trim>


    </Statement>
    <Statement Id="updateUserSetTest" >
      update TB_USER
      <Set>
        <If Test="Name!=null  ">
          Name=#{Name}
        </If>
      </Set>
      <Where>
        <If Test="ID!=null  ">
          ID=#{ID}
        </If>
      </Where>
    </Statement>

    <Statement Id="GetListForeachIncludeIfTest"  >
      Select * From TB_USER T Where 1=1
      <Foreach Prepend="And" Property="LikeNames" Index="index" Item="item" Open="(" Separator="Or" Close=")">
        <If Test='Name=="546"' >
          Name Like  '%#{item.Name}%' and Id > #{index}  and Id > #{item.Id}

        </If>
        <If Test="Nam != null" >
          Name =#{item.Name}

        </If>
      </Foreach>
      

 
    </Statement>

    <Statement Id="GetList">
      Select * From TB_USER T Where 1=1
      <IsNotEmpty Prepend="And T.Id" Property="Ids" In="true" />

    </Statement>

    <Statement Id="GetListInclude">
      Select <Include RefId="Test_QueryParams" /> From TB_USER T Where 1=1

      <Include RefId="Test_Condition" />


    </Statement>

    <Statement Id="TestVari">
      SELECT A.* FROM B_BZAPPLY A INNER JOIN   <Variable Property="tablename"></Variable> B ON A.SERIALNO=B.SERIALNO

      <Dynamic Prepend="Where">
        <IsTrue Prepend=" " Property="Yes">
          <IsNotEmpty Property="Name"  >
            1=1
          </IsNotEmpty>

        </IsTrue>
      </Dynamic>

      <OrderBy>
        <Variable Property="ordertext" Prepend=""></Variable>
        <Variable Property="orderdesc" Prepend="{#nbsp}{#nbsp}{#nbsp}{#nbsp}{#nbsp}{#nbsp}">{#nbsp}{#nbsp}{#nbsp}{#nbsp}{#nbsp}{#nbsp}</Variable>

      </OrderBy>

    </Statement>

  </Statements>
</SqlMap>
